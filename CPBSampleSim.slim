// set up a simple neutral simulation
initialize()
{
   //initializeSLiMModelType("nonWF");
	// set the overall mutation rate
	initializeMutationRate(1e-7);
	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	// uniform chromosome of length 100 kb
	initializeGenomicElement(g1, 0, 99999);
	// uniform recombination along the chromosome
	initializeRecombinationRate(1e-8);
}
// create a population of 500 individuals
1 early()
{
	//sim.addSubpop("p1", 500);
    if (!fileExists(/*"./data/distances.csv"*/"C:/Users/sohan/Documents/School/Entomology Research/Codebase/Spatiotemporal-CPB-Modeline-with-SLiM/data/distances.csv")) {
        print("distances.csv not found");
        sim.simulationFinished();
    }
    df = readCSV(/*"./data/distances.csv"*/"C:/Users/sohan/Documents/School/Entomology Research/Codebase/Spatiotemporal-CPB-Modeline-with-SLiM/data/distances.csv", colNames=T, sep=",");
    if (isNULL(df)) {
    	print("Could not read distances.csv");
    	sim.simulationFinished();
    }
    //sim.addSubpop("p120201", 200);
    fvids = df.colNames;
    for (i in 1:(size(fvids)-1)) {
        sim.addSubpop("p"+fvids[i], 200);
    }
    mx = df.asMatrix();
    print(mx[0+nrow(mx)*3]);

    // set the migration rate between subpopulations
    for (i in 1:(size(fvids)-1)) {
        count = 0;
        for (j in 0:(nrow(mx)-1)) {
            if (mx[i+nrow(mx)*j] > 0) {
            	count = count + 1;
            }
        }
        if (count > 0) {
            migrationRate = 1.0 / count;
            for (j in 0:(nrow(mx)-1)) {
            	if (i-1 != j & mx[i+nrow(mx)*j] > 0) {
                	sim.subpopulations[i-1].setMigrationRates(sim.subpopulations[j], migrationRate);
            	}
            }
        }
        if (count == 0) {
            print("No migration rates set for subpopulation p"+fvids[i]);
            for (j in 0:(nrow(mx)-1)) {
            	if (i-1 != j) {
                	sim.subpopulations[i-1].setMigrationRates(sim.subpopulations[j], 0.0);
            	}
            }
        }
    }
    
}
// run to tick 10000
10000 early()
{
	sim.simulationFinished();
}